#!/usr/bin/env python

import re
import json
import os
import subprocess
import datetime
import sys
import argparse
import time
import requests
from lxml import html
from lxml import etree

def monitor(items, results, timeout=10):
	warning = {}
	for monitor_item in items:
		name = monitor_item['name']
		url = monitor_item['url']
		pattern = monitor_item['pattern']
		pattern_type = monitor_item['pattern_type']
		response = None
		res = None
		text = None
		try:
			response = requests.get(url, timeout=timeout)
			text = response.text
		except:
			print sys.exc_info()[0]
		finally:
			if response != None:
				response.close()

		if text:
			if pattern_type == 'regex':
				m = re.search(pattern, text)
				if m != None:
					res = m.group(1)
			elif pattern_type == 'xpath':
				tree = html.fromstring(text)
				m = tree.xpath(pattern)
				if len(m) > 0:
					res = m[0]
					if isinstance(res, html.HtmlElement):
						res = etree.tounicode(res)

		if not results.has_key(name):
			results[name] = {'result': 'N/A'}
		if res:
			if results[name]['result'] != res:
				warning[name] = {'meta': monitor_item, 'result': res}
				results[name] = {'result': res}
			results[name]['status'] = 'normal'
			results[name]['last_success'] = CURRENT_TIME
		else:
			print 'error occurs when fetching %s' % name
			results[name]['status'] = 'error_fetching'
	return results, warning

def notify(warning, config_notf):
	if len(warning) == 0:
		print 'nothing to notify'
		return
	print 'detected changes, notifying'
	html = ''
	html += "<p>Time: %s</p>" % CURRENT_TIME.encode('utf-8')
	html += "<p>Changes:</p>"
	for item in warning:
            html += "<p><strong><a href='%s'>%s</a></strong></p><div style='margin-left:16px'><p style='white-space: pre-wrap'>%s</p></div>" % (warning[item]['meta']['url'].encode('utf-8'), item.encode('utf-8'), warning[item]['result'].encode('utf-8'))
	if config_notf['type'] == 'email_sendgrid':
		print 'notifying via sendgrid email'
		try:
			import sendgrid
		except:
			print 'sendgrid package not found, exit'
			exit()
		sg = sendgrid.SendGridClient(config_notf['account'], config_notf['password'])
		message = sendgrid.Mail()
		message.set_from(config_notf['from'])
		message.add_to(config_notf['to'])
		message.set_subject('Monitan: %s Updated' % (', '.join(warning.keys())))
		message.set_html(html)
		message.set_text('')
		status, msg = sg.send(message)
		print 'restuls:', status, msg
	else:
		print 'no available notify type found'

def parse_args():
	parser = argparse.ArgumentParser(description='Monitor web page and alert for changes.')
	parser.add_argument('-c', dest='config_file', default='~/.monitan', help='the config file location, default is ~/.monitan')
	parser.add_argument('-r', dest='db_file', default='~/.monitan_db', help='the database file location, default is ~/.monitan_db')
	parser.add_argument('-i', dest='stay', type=int, default=15, help='monitor interval (minutes), default is 15')
	parser.add_argument('-s', dest='status_only', action='store_true', help='show current status and exit')
	parser.add_argument('-n', dest='refresh', action='store_true', help='ignore current results')
	parser.add_argument('-d', dest='depress_notify', action='store_true', help='do not notify after monitoring')
	args = parser.parse_args()
	return args

def main(items, timeout, config_notf, db_file, status_only, refresh, depress_notify):
	if os.path.exists(db_file) and not refresh:
		f = open(db_file, "r")
		db = json.loads(f.read())
		f.close()
	else:
		db = {'results': {}, 'last_check': ''}

	results = db['results']

	if status_only:
		print 'last check: %s\n' % db['last_check']
		for r in results:
			print r, results[r]['status'],
			if 'last_success' in results[r]:
				print results[r]['last_success'], ':'
			print results[r]['result']
			print
		exit()

	# monitor
	results, warning = monitor(items, results, timeout)

	db = {
		'last_check': CURRENT_TIME,
		'results': results
	}

	# saving
	print 'saving'
	f = open(db_file, "w")
	f.write(json.dumps(db))
	f.close()

	# notify
	if not depress_notify:
		notify(warning, config_notf)

if __name__ == '__main__':
	args = parse_args()
	config_file = os.path.expanduser(args.config_file)
	db_file = os.path.expanduser(args.db_file)
	status_only = args.status_only
	refresh = args.refresh
	depress_notify = args.depress_notify

	if os.path.exists(config_file):
		f = open(config_file, "r")
		config = json.loads(f.read())
		f.close()
	else:
		print "Can not find monitan config, exit"
		exit()

	items = config['monitor']
	timeout = config['timeout']
	config_notf = config['notify']

	while True:
		CURRENT_TIME = str(datetime.datetime.now())
		main(items, timeout, config_notf, db_file, status_only, refresh, depress_notify)

		print 'monitor again in %d minutes' % args.stay
		time.sleep(args.stay * 60)
