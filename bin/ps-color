#!/bin/bash

[ -t 1 ] || piping=true

ps -a -x -o "user,pid,%cpu,%mem,tt,start,time,command" |
awk '
    NR>1 {
        if ($7 ~ /^[0-9]{1,2}$/) {
            $6 = $6 " " $7
            for(i=7;i<NF;i++){
                $i = $(i+1)
            }
            NF-=1
        }
        path=$8
        for(i=9;i<=NF;i++) {
            #in case the line is too long to be parsed by column command
            if (length(path) < 1024) {
                path=path " " $i
            } else {
                path=path " ..."
            }
        }
        printf "%s\t|%s\t|%s\t|%s\t|%s\t|%s\t|%s\t|%s\n", $1, $2, $3, $4, $5, $6, $7, path
    }
' |
column -t -s '	' |
sed 's/  |/|/g' |
if [ "$piping" = true ]; then cat; else cut -c -"$(tput cols)"; fi |
awk '
    BEGIN {
        FS="|"
        OFS=" "
    }
    function c(s, color) {
        return "\033[38;5;" color "m" s "\033(B\033[m"
    }
    {
        # highlight current user and root
        if ($1 ~ /^root/) { $1 = c($1, 124) }
        else if ($1 ~ /^'"${USER:0:7}"'/) { $1 = c($1, 5) }
        else { $1 = c($1, 238) }

        # pid
        $2 = c($2, 26)

        # print the line only when HIGH_CPU_MEM_ONLY is set
        PRINTING = '"0${HIGH_CPU_MEM_ONLY:+1}"'
        # PRINTING = 0

        # %cpu, %mem
        for (i=3;i<=4;i++) {
            if ($i ~ /^0\.0/) { $i = c($i, 234) }
            else if ($i ~ /^0\.[1-9]/) { $i = c($i, 238) }
            else if ($i ~ /^[0-9]{2,}(\.)?/) { $i = c($i, 226); PRINTING = 0 }
            else { $i = c($i, 136); PRINTING = 0 }
        }

        # tt
        if ($5 ~ /^\?\?/) { $5 = c($5, 234) }
        else { $5 = c($5, 236) }

        # start, time
        $6 = c($6, 238)
        $7 = c($7, 238)

        if (PRINTING == 0) {
            print
        }
    }
'

