[apply]
  whitespace = fix
[core]
  autocrlf = input
  safecrlf = warn
  whitespace = trailing-space,space-before-tab
  excludesfile = ~/.ignore
  editor = ${GIT_EDITOR:-vim}
[color]
  ui = auto
[diff]
  tool = vimdiff
[merge]
  tool = vimdiff
  conflictstyle = diff3
[mergetool]
  prompt = false
  keepBackup = false
[push]
  default = simple
[grep]
  extendedRegexp = true
[alias]
  aliases = !git config --get-regexp alias | cut -c7- | sed -E 's/([^ ]*) /'"$(tput setaf 5)"'\\1^'"$(tput sgr0)"'/' | column -t -s^
  aa = add --all :/
  ac = add --all .
  au = add -u
  br = branch
  ci = commit --verbose
  cia = !git ci -a
  cim = !git ci --amend
  cimn = !git ci --amend --no-edit
  ciam = !git cia --amend
  ciamn = !git cia --amend --no-edit
  cp = cherry-pick
  ft = fetch
  fta = fetch --all
  rb = rebase
  st = status
  sh = stash
  sm = submodule
  smu = submodule update --init --recursive
  smpa = submodule foreach git pull --rebase
  pr = pull --rebase
  pm = !git pr && git smu
  pp = !git pm && git push
  rv = remote -v
  gr = grep -n -I

  # execute shell command on the top level of the repo
  exec = "!exec "

  # print toplevel path of the repo
  root = rev-parse --show-toplevel

  # swap last two commits
  swaplast = "!GIT_SEQUENCE_EDITOR=\"sed -i -n 'h;1n;2p;g;p'\" git rebase -i HEAD~2"

  # checkout from the selection of a branch list, if no params given
  co = "!gco(){ if [[ $# > 0 ]]; then git checkout $@; else git branch -vv | fzf-tmux +m | cut -c 3- | awk '{print $1}' | xargs git checkout; fi;}; gco"

  # logs
  l = "!gpretty() { \
    git log --pretty='tformat:%C(green)%h|%C(magenta)(%ar)|%C(cyan)<%an>|%C(red)%d%C(reset) %s' $@ | \
    perl -pe 's/(\\(\\d+ \\w+)[^<)]*ago\\)/\\1)/' | \
    column -s '|' -t | \
    ${GIT_PAGER:-less -FXRS}; }; gpretty"

  lg = !git l --graph
  r = !GIT_PAGER=cat git l -10
  h = !GIT_PAGER=cat git l -1
  ld = log --decorate
  ls = log --decorate --stat

  # diffs
  df = !cdiff -c auto --
  di = !cdiff -c auto -s -w 0 --
  ds = diff --stat
  dn = diff --name-only

  # edit changed files, ran at the top level of current git repo
  de = "!gde(){ files=$(git diff --name-only $@); [[ $? == 0 ]] && ${GIT_EDITOR:-vim} $files; }; gde"

  dfc = !git df --cached
  df1 = !git df HEAD~ HEAD
  df2 = !git df HEAD~2 HEAD
  dic = !git di --cached
  di1 = !git di HEAD~ HEAD
  di2 = !git di HEAD~2 HEAD
  dsc = !git ds --cached
  ds1 = !git ds HEAD~ HEAD
  ds2 = !git ds HEAD~2 HEAD
  dnc = !git dn --cached
  dn1 = !git dn HEAD~ HEAD
  dn2 = !git dn HEAD~2 HEAD
  dec = !git de --cached
  de1 = !git de HEAD~ HEAD
  de2 = !git de HEAD~2 HEAD
